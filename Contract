// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

contract PiNetworkNFT is ERC721URIStorage, Ownable {
    using Counters for Counters.Counter;
    Counters.Counter private _tokenIds;
    
    // Base URI for metadata
    string private _baseURIextended;

    // Minting price in Pi
    uint256 public mintPrice = 1 ether; // 1 Pi
    
    constructor() ERC721("PiNetworkNFT", "PINFT") {}
    
    // Allow owner to set minting price
    function setMintPrice(uint256 _price) public onlyOwner {
        mintPrice = _price;
    }
    
    // Set base URI for metadata
    function setBaseURI(string memory baseURI_) external onlyOwner {
        _baseURIextended = baseURI_;
    }
    
    // Override base URI function
    function _baseURI() internal view virtual override returns (string memory) {
        return _baseURIextended;
    }
    
    // Mint new NFT
    function mintNFT(address recipient, string memory tokenURI)
        public
        payable
        returns (uint256)
    {
        require(msg.value >= mintPrice, "Insufficient payment");
        
        _tokenIds.increment();
        uint256 newItemId = _tokenIds.current();
        _mint(recipient, newItemId);
        _setTokenURI(newItemId, tokenURI);
        
        return newItemId;
    }
    
    // Allow owner to withdraw Pi tokens
    function withdraw() public onlyOwner {
        uint256 balance = address(this).balance;
        payable(owner()).transfer(balance);
    }
    
    // Get total supply of NFTs
    function getTotalSupply() public view returns (uint256) {
        return _tokenIds.current();
    }
}
